# nextpnr -- Next Generation Place and Route
#
# Copyright (C) 2025 Aki Van Ness <aki@lethalbit.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

from types import ModuleType
from inspect import getmembers, ismodule
from pathlib import Path

from mypy import stubgenc

# Typing stubs always need manual cleanup afterwards, so dump them to an ignored temp folder
TYPESTUB_OUTPUT = Path(__file__).parent / 'typing-stubs' / '_autogenerated'
TYPESTUB_OUTPUT.mkdir(parents = True, exist_ok = True)


def iter_modules(module: ModuleType, hierarchy: str = '') -> list[str]:
	submods = list[str]()

	if hierarchy == '':
		hierarchy = f'{module.__name__}'
		submods.append(hierarchy)

	for name, mod in getmembers(module, ismodule):
		submods.append(f'{hierarchy}.{name}')
		submods += iter_modules(mod, f'{hierarchy}.{name}')

	return submods


import nextpnr

nextpnr_modules = iter_modules(nextpnr)

for module in nextpnr_modules:
	print(f'Generating typing stubs for \'{module}\'')

	# Get the rightmost module
	modname = module.split('.')[-1]

	stub_dir = TYPESTUB_OUTPUT / modname
	stub_dir.mkdir(parents = True, exist_ok = True)
	stubfile = stub_dir / '__init__.pyi'

	stubgenc.generate_stub_for_c_module(
		module, str(stubfile), nextpnr_modules
	)
